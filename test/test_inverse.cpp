//---------------------------------------------------------------------------//
// Copyright (c) 2018-2020 Mikhail Komarov <nemo@nil.foundation>
// Copyright (c) 2018-2020 Pavel Kharitonov <ipavrus@nil.foundation>
//
// Distributed under the Boost Software License, Version 1.0
// See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt
//---------------------------------------------------------------------------//

#ifdef _MSC_VER
#define _SCL_SECURE_NO_WARNINGS
#endif

#include "test.hpp"

#if !defined(TEST_CPP_INT)
#define TEST_CPP_INT
#endif

#ifdef TEST_CPP_INT
#include <boost/multiprecision/cpp_int.hpp>
#endif

#include <boost/multiprecision/inverse.hpp>
#include <boost/multiprecision/modular/modular_adaptor.hpp>
#include <boost/multiprecision/modular/modular_params.hpp>
#include <boost/multiprecision/number.hpp>
#include <boost/multiprecision/cpp_modular.hpp>

template <typename T>
void test_cpp_int()
{
   //test for monty_inverse
   BOOST_CHECK_EQUAL(monty_inverse(T(12), T(5), T(5)),T(1823));
   BOOST_CHECK_EQUAL(monty_inverse(T(10), T(37), T(1)),T(26));
   BOOST_CHECK_EQUAL(monty_inverse(T(3), T(2), T(3)),T(3));
   BOOST_CHECK_EQUAL(monty_inverse(T(3), T(4), T(2)), T(11));
   BOOST_CHECK_EQUAL(monty_inverse(T(4), T(7), T(2)), T(37));
   BOOST_CHECK_EQUAL(monty_inverse(T(32), T(247), T(1)), T(193));
   BOOST_CHECK_EQUAL(monty_inverse(T(3), T(7), T(7)), T(549029));
   BOOST_CHECK_EQUAL(monty_inverse(T(5317589), T(23), T(8)), T(32104978469));

   //test for inverse with extended euclidean algorithm
   BOOST_CHECK_EQUAL(monty_inverse(T(12), T(5), T(5)),T(1823));
   BOOST_CHECK_EQUAL(monty_inverse(T(10), T(37), T(1)),T(26));
   BOOST_CHECK_EQUAL(monty_inverse(T(3), T(2), T(3)),T(3));
   BOOST_CHECK_EQUAL(monty_inverse(T(3), T(4), T(2)), T(11));
   BOOST_CHECK_EQUAL(monty_inverse(T(4), T(7), T(2)), T(37));
   BOOST_CHECK_EQUAL(monty_inverse(T(32), T(247), T(1)), T(193));
   BOOST_CHECK_EQUAL(monty_inverse(T(3), T(7), T(7)), T(549029));
   BOOST_CHECK_EQUAL(monty_inverse(T(5317589), T(23), T(8)), T(32104978469));

   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(5), T("0x7fffffffffffffffffffffffffffffff")), T("0x33333333333333333333333333333333"));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(333), T("0x7fffffffffffffffffffffffffffffff")), T("0x17d4f2ee517d4f2ee517d4f2ee517d4f"));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T("0x435b21e35ccd62dbdbafa1368cf742f0"), T("0x7fffffffffffffffffffffffffffffff")), T("0x604ddb74e5a55e559a7320e45b06eaf6"));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(2), T("0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff")),
                     T("0x10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(3), T(8)),T(3));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(46), T(207)),T(0));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(2), T(2)),T(0));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(0), T(2)), T(0));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(46), T(46)), T(0));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(1), T(7)), T(1));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(35), T(118)), T(27));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(37), T(37)), T(0));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(32), T(247)), T(193));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(3), T(232)), T(155));

   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T("256992387993922882115519242002267204163958280694902854777438773165028812741820300742384101620467227297951260702776745365693102268609333941403372929142489383748076291"),
                                                          T("3105560673298506328472089385746585896322911006740772751605160752499227148385424850362140158165019680645739648726058090243814223511639161631852729287604717869259565828")),
                     T("2322484593360248972803085811686365806060063797313230509497970163285203519904646342173323688226147654544918783691327115436052292182385106099615339567513136063879840431"));

   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T("65790051326444257821572925952580404270899173102825542663868894627884582709571518677209748416019817305674876843604308670298295897660589296995641401495105646770364032950"),
                                                          T("1460598742727828605836860681156746006166272494387112693708892744343548055514972863039476201659720247220048664250204314648520085411164461712526657028588699682983099362771")),
                     T("370134468809235355809931021496418560257927761651782631431723120822241707286126622619231228275210678415132318220494260963802381448709723310690465171935975287188943190781"));

   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(3), T(0x10)), T(11));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(43000466091), T(0x10000000000)), T(140404367363));

   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T("3329223706171052463206866408355190852145308853551222855374206553291583641200362811169867167522066732427259441069045458590915570173077273266668323626418910290729833115917608762612451607036836604560196526748133295229482315432160861956985661720415008502817376589122369169168503051700575534361360734357915507005267791266056164843197115173542457409178397682412186017844044878477733706673665949312479502081417286848135607066940796741261651879705761216547813649105594986990007847567220787224253724912309650653332895570458720843322485065681189768697291752149748575893233520856711838140401691494532333502278879425087656782163494363567584633848194784070822245649557468578497368723157561724530746784741768646102936863260630088882545875047173194357829837349405264332156553159"),
                                                          T("5159669275902268897019683770634129859849131442089512209466255369748647885295043458100453095139637532489732379349334183998359005271540851438475735390060160055101459757369025094548935216928274885474920588457238932199212826132848112983030207228729230350143070245214615032330098373606816857555487378911597356175295963296209024100980888874174104384926439773409352855895683162800486061893625461339248419592365333197671396390223849652458316548872173632032072142493359961192701645150390051578875246900773560274606831152842526302321197703270752422496079310760804228859682734104661333367088085354635701827808417686374790164642660390557925243983808216928421220094838103017958334974205040660858707963225716195222460679137994123278276584663712976241848458904056941218720227786752")),
                     T("1616976508685598612715404615539711729591496303838727278361745768459912744766103110805335531789260471902032668556823877781797119177369744675655036227693862387901335929380526158525335617191171199406261059141492729550964383378755592271377330924178695575317855482198418687207284119472436638891655267287870468947394828003595194476459620373954194618413638984959865778647102302286558592688810633664007264011579909176526804508142200273299822852592676936629738013383103344642638188458260268481981965239756241374381655466503673701310357329513881591759718900992472283603129650577355418728929787837071330285526447596817142247043818915739644061292726006592557005008244120258692943705325131549610392209481948231318177450181776222904306153521050324221361215524333142914455291939319"));
   BOOST_CHECK_EQUAL(inverse_extended_euclidean_algorithm(T(65279), T("0x100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")),
                     T("21361914537342414713552871917029943574709104078599594478169627833328205584507146367057038170698710253677755075362127788711957331760388539866898398399344480664991941861081743615"));
}

template <typename T>
void test_cpp_int_backend()
{

   using namespace boost::multiprecision;
   number<T> res;

   number<backends::modular_adaptor<T> > modular;

   modular = number<backends::modular_adaptor<T> >(10, 37);
   modular.backend().mod_data().adjust_regular(res.backend(), inverse_extended_euclidean_algorithm(modular).backend().base_data());
   BOOST_CHECK_EQUAL(cpp_int(res.backend()), cpp_int(26));

   modular = number<backends::modular_adaptor<T> >(3, 8);
   modular.backend().mod_data().adjust_regular(res.backend(), inverse_extended_euclidean_algorithm(modular).backend().base_data());
   BOOST_CHECK_EQUAL(cpp_int(res.backend()), cpp_int(3));

   modular = number<backends::modular_adaptor<T> >(3, 16);
   modular.backend().mod_data().adjust_regular(res.backend(), inverse_extended_euclidean_algorithm(modular).backend().base_data());
   BOOST_CHECK_EQUAL(cpp_int(res.backend()), cpp_int(11));

   modular = number<backends::modular_adaptor<T> >(65279, "0x100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
   modular.backend().mod_data().adjust_regular(res.backend(), inverse_extended_euclidean_algorithm(modular).backend().base_data());
   BOOST_CHECK_EQUAL(cpp_int(res.backend()), cpp_int("21361914537342414713552871917029943574709104078599594478169627833328205584507146367057038170698710253677755075362127788711957331760388539866898398399344480664991941861081743615"));

   modular = number<backends::modular_adaptor<T> >("3329223706171052463206866408355190852145308853551222855374206553291583641200362811169867167522066732427259441069045458590915570173077273266668323626418910290729833115917608762612451607036836604560196526748133295229482315432160861956985661720415008502817376589122369169168503051700575534361360734357915507005267791266056164843197115173542457409178397682412186017844044878477733706673665949312479502081417286848135607066940796741261651879705761216547813649105594986990007847567220787224253724912309650653332895570458720843322485065681189768697291752149748575893233520856711838140401691494532333502278879425087656782163494363567584633848194784070822245649557468578497368723157561724530746784741768646102936863260630088882545875047173194357829837349405264332156553159",
                                                   "5159669275902268897019683770634129859849131442089512209466255369748647885295043458100453095139637532489732379349334183998359005271540851438475735390060160055101459757369025094548935216928274885474920588457238932199212826132848112983030207228729230350143070245214615032330098373606816857555487378911597356175295963296209024100980888874174104384926439773409352855895683162800486061893625461339248419592365333197671396390223849652458316548872173632032072142493359961192701645150390051578875246900773560274606831152842526302321197703270752422496079310760804228859682734104661333367088085354635701827808417686374790164642660390557925243983808216928421220094838103017958334974205040660858707963225716195222460679137994123278276584663712976241848458904056941218720227786752");
   modular.backend().mod_data().adjust_regular(res.backend(), inverse_extended_euclidean_algorithm(modular).backend().base_data());
   BOOST_CHECK_EQUAL(cpp_int(res.backend()), cpp_int("1616976508685598612715404615539711729591496303838727278361745768459912744766103110805335531789260471902032668556823877781797119177369744675655036227693862387901335929380526158525335617191171199406261059141492729550964383378755592271377330924178695575317855482198418687207284119472436638891655267287870468947394828003595194476459620373954194618413638984959865778647102302286558592688810633664007264011579909176526804508142200273299822852592676936629738013383103344642638188458260268481981965239756241374381655466503673701310357329513881591759718900992472283603129650577355418728929787837071330285526447596817142247043818915739644061292726006592557005008244120258692943705325131549610392209481948231318177450181776222904306153521050324221361215524333142914455291939319"));

   modular = number<backends::modular_adaptor<T> >(43000466091, 0x10000000000);
   modular.backend().mod_data().adjust_regular(res.backend(), inverse_extended_euclidean_algorithm(modular).backend().base_data());
   BOOST_CHECK_EQUAL(cpp_int(res.backend()), cpp_int(140404367363));
}

int main()
{
#ifdef TEST_CPP_INT
   test_cpp_int<boost::multiprecision::cpp_int>();
   test_cpp_int_backend<boost::multiprecision::cpp_int_backend<>>();
#endif

   return boost::report_errors();
}

